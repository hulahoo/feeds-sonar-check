# Generated by Django 4.0.4 on 2022-08-04 14:31

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import intelhandler.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created', intelhandler.models.CreationDateTimeField(auto_now_add=True, verbose_name='создано')),
                ('modified', intelhandler.models.ModificationDateTimeField(auto_now=True, verbose_name='изменено')),
                ('username', models.CharField(max_length=255, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ActivityType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', intelhandler.models.CreationDateTimeField(auto_now_add=True, verbose_name='создано')),
                ('modified', intelhandler.models.ModificationDateTimeField(auto_now=True, verbose_name='изменено')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ParsingRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', intelhandler.models.CreationDateTimeField(auto_now_add=True, verbose_name='создано')),
                ('modified', intelhandler.models.ModificationDateTimeField(auto_now=True, verbose_name='изменено')),
            ],
            options={
                'verbose_name': 'Правило парсинга',
                'verbose_name_plural': 'Правила парсинга',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', intelhandler.models.CreationDateTimeField(auto_now_add=True, verbose_name='создано')),
                ('modified', intelhandler.models.ModificationDateTimeField(auto_now=True, verbose_name='изменено')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('is_instead_full', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('provider_name', models.CharField(max_length=255)),
                ('path', models.TextField()),
                ('certificate', models.FileField(blank=True, null=True, upload_to='', verbose_name='Путь к сертификату')),
                ('authenticity', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], verbose_name='Достоверность')),
                ('format', models.CharField(choices=[('STIX', 'stix'), ('MISP', 'misp'), ('FREE_TEXT', 'free_text'), ('JSON', 'json'), ('CSV', 'csv')], default='CSV', max_length=15, verbose_name='Формат')),
                ('auth_type', models.CharField(choices=[('NAU', 'Отсуствует'), ('API', 'API token'), ('BSC', 'HTTP basic')], default='NAU', max_length=3, verbose_name='Тип авторизации')),
                ('auth_login', models.CharField(blank=True, max_length=32, null=True, verbose_name='Логин для авторизации')),
                ('auth_password', models.CharField(blank=True, max_length=64, null=True, verbose_name='Пароль для авторизации')),
                ('max_rows', models.IntegerField(default=None, null=True)),
                ('raw_indicators', models.TextField(default=None, null=True)),
                ('update_time_period', models.PositiveBigIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Источник',
                'verbose_name_plural': 'Источники',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', intelhandler.models.CreationDateTimeField(auto_now_add=True, verbose_name='создано')),
                ('modified', intelhandler.models.ModificationDateTimeField(auto_now=True, verbose_name='изменено')),
                ('name', models.CharField(max_length=30, verbose_name='Название тега')),
                ('colour', models.CharField(blank=True, max_length=30, null=True, verbose_name='Название тега')),
                ('exportable', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
            },
        ),
        migrations.CreateModel(
            name='Indicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', intelhandler.models.CreationDateTimeField(auto_now_add=True, verbose_name='создано')),
                ('modified', intelhandler.models.ModificationDateTimeField(auto_now=True, verbose_name='изменено')),
                ('type', models.CharField(choices=[('FEMA', "Email's origin"), ('SEMA', "Email's subject"), ('MD5H', 'File hashe MD5'), ('SHA1', 'File hashe SHA1'), ('SHA2', 'File hashe SHA256'), ('FILE', 'File name'), ('REGS', 'Registry'), ('IPAD', 'IP adresses'), ('URLS', "Full URL's"), ('DOMN', "Domain's")], default='IPAD', max_length=4, verbose_name='Тип индикатора')),
                ('uuid', models.CharField(max_length=255, unique=True, verbose_name='Уникальный идентификатор индикатора')),
                ('category', models.CharField(blank=True, max_length=128, null=True, verbose_name='Категория индикатора')),
                ('value', models.CharField(max_length=256, verbose_name='Значение индикатора')),
                ('weight', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], verbose_name='Вес')),
                ('false_detected', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='счетчик ложных срабатываний')),
                ('positive_detected', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='счетчик позитивных срабатываний')),
                ('detected', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='общий счетчик срабатываний')),
                ('first_detected_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата первого срабатывания')),
                ('last_detected_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата последнего срабатывания')),
                ('supplier_name', models.CharField(max_length=128, verbose_name='Название источника')),
                ('supplier_vendor_name', models.CharField(max_length=128, verbose_name='Название поставщика ')),
                ('supplier_type', models.CharField(max_length=64, verbose_name='Тип поставщика')),
                ('supplier_confidence', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], verbose_name='Достоверность')),
                ('supplier_created_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата последнего обновления')),
                ('ioc_context_exploits_md5', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_exploits_sha1', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_exploits_sha256', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_exploits_threat', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_av_verdict', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_md5', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_sha1', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_sha256', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_affected_products_product', models.CharField(blank=True, max_length=64, null=True)),
                ('joc_context_domains', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_file_names', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_file_size', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_file_type', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_files_behaviour', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_files_md5', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_files_sha1', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_files_sha256', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_files_threat', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_malware', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_mask', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_popularity', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_port', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_protocol', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_publication_name', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_severity', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_type', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_url', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_urls_url', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_vendors_vendor', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_geo', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_id', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_industry', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_ip', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_ip_geo', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_ip_whois_asn', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_ip_whois_contact_abuse_country', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_ip_whois_contact_abuse_email', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_ip_whois_contact_abuse_name', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_ip_whois_contact_owner_city', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_ip_whois_contact_owner_code', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_ip_whois_contact_owner_country', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_ip_whois_contact_owner_email', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_ip_whois_contact_owner_name', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_ip_whois_country', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_ip_whois_created', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_ip_whois_desrc', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_ip_whois_net_name', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_ip_whois_net_range', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_ip_whois_updated', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_whois_mx', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_whois_mx_ips', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_whois_ns', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_whois_ns_ips', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_whois_city', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_whois_country', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_whois_created', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_whois_domain', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_whois_email', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_whois_expires', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_whois_name', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_whois_org', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_whois_registrar_email', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_whois_registrar_name', models.CharField(blank=True, max_length=64, null=True)),
                ('ioc_context_whois_updated', models.CharField(blank=True, max_length=64, null=True)),
                ('ttl', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Дата удаления')),
                ('tag', models.ManyToManyField(related_name='tags', to='intelhandler.tag')),
            ],
            options={
                'verbose_name': 'Индикатор',
                'verbose_name_plural': 'Индикаторы',
            },
        ),
        migrations.CreateModel(
            name='Feed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', intelhandler.models.CreationDateTimeField(auto_now_add=True, verbose_name='создано')),
                ('modified', intelhandler.models.ModificationDateTimeField(auto_now=True, verbose_name='изменено')),
                ('type_of_feed', models.CharField(choices=[('FEMA', "Email's origin"), ('SEMA', "Email's subject"), ('MD5H', 'File hashe MD5'), ('SHA1', 'File hashe SHA1'), ('SHA2', 'File hashe SHA256'), ('FILE', 'File name'), ('REGS', 'Registry'), ('IPAD', 'IP adresses'), ('URLS', "Full URL's"), ('DOMN', "Domain's")], default='IPAD', max_length=4, verbose_name='Тип фида')),
                ('format_of_feed', models.CharField(choices=[('CSV', 'CSV формат'), ('JSN', 'JSON формат'), ('XML', 'XML формат'), ('TXT', 'TXT формат')], default='TXT', max_length=15, verbose_name='Формат фида')),
                ('auth_type', models.CharField(choices=[('NAU', 'Отсуствует'), ('API', 'API token'), ('BSC', 'HTTP basic')], default='NAU', max_length=3, verbose_name='Тип авторизации')),
                ('polling_frequency', models.CharField(choices=[('NVR', 'Никогда'), ('M30', '30 минут'), ('HR1', '1 час'), ('HR2', '2 часа'), ('HR4', '4 часа'), ('HR8', '8 часов'), ('H16', '16 часов'), ('H24', '24 часа')], default='NVR', max_length=3, verbose_name='Частота обновления фида')),
                ('auth_login', models.CharField(blank=True, max_length=32, null=True, verbose_name='Логин для авторизации')),
                ('auth_password', models.CharField(blank=True, max_length=64, null=True, verbose_name='Пароль для авторизации')),
                ('ayth_querystring', models.CharField(blank=True, max_length=128, null=True, verbose_name='Строка для авторизации')),
                ('separator', models.CharField(blank=True, max_length=8, null=True, verbose_name='Разделитель для CSV формата')),
                ('custom_field', models.CharField(blank=True, max_length=128, null=True, verbose_name='Кастомное поле')),
                ('sertificate', models.FileField(blank=True, null=True, upload_to='', verbose_name='Файл сертификат')),
                ('vendor', models.CharField(max_length=32, verbose_name='Вендор')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='Название фида')),
                ('link', models.CharField(max_length=255, verbose_name='Ссылка на фид')),
                ('confidence', models.IntegerField(validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)], verbose_name='Достоверность')),
                ('records_quantity', models.IntegerField(blank=True, null=True, verbose_name='Количество записей')),
                ('update_status', models.CharField(choices=[('ENABLED', 'ENABLED'), ('DISABLED', 'DISABLED'), ('UPDATE_ERROR', 'UPDATE_ERROR')], default='ENABLED', max_length=15)),
                ('ts', models.DateTimeField(auto_now_add=True)),
                ('indicators', models.ManyToManyField(blank=True, related_name='feeds', to='intelhandler.indicator', verbose_name='Индикатор')),
                ('parsing_rules', models.ManyToManyField(blank=True, related_name='feed_parsing_rules', to='intelhandler.parsingrule', verbose_name='Правила для парсинга')),
                ('source', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='intelhandler.source')),
            ],
            options={
                'verbose_name': 'Фид',
                'verbose_name_plural': 'Фиды',
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', intelhandler.models.CreationDateTimeField(auto_now_add=True, verbose_name='создано')),
                ('modified', intelhandler.models.ModificationDateTimeField(auto_now=True, verbose_name='изменено')),
                ('comment', models.TextField()),
                ('activity_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='intelhandler.activitytype')),
                ('indicator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='intelhandler.indicator')),
                ('user', models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
    ]
